(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{331:function(t,e,a){"use strict";a.r(e);var s=a(9),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"overview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),e("p",[t._v("Views are the building blocks that you use to declare your app‚Äôs user interface. Each view contains a description of what to display for a given state. Every bit of your app that‚Äôs visible to the user derives from the description in a view, and any type that conforms to the View protocol can act as a view in your app.")]),t._v(" "),e("h2",{attrs:{id:"create-a-view"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-a-view"}},[t._v("#")]),t._v(" Create a View")]),t._v(" "),e("p",[t._v("SwiftUI offers a declarative approach to user interface design. With a traditional imperative approach, the burden is on your controller code not only to instantiate, lay out, and configure views, but also to continually make updates as conditions change. In contrast, with a declarative approach, you create a lightweight description of your user interface by declaring views in a hierarchy that mirrors the desired layout of your interface. SwiftUI then manages drawing and updating these views in response to events like user input or state changes.")]),t._v(" "),e("p",[t._v("Create a "),e("code",[t._v("struct")]),t._v(" that conforms to the "),e("code",[t._v("View")]),t._v(" "),e("a",{attrs:{href:"https://developer.apple.com/documentation/swiftui/view",target:"_blank",rel:"noopener noreferrer"}},[t._v("protocol"),e("OutboundLink")],1),t._v(" and implement the required "),e("code",[t._v("body")]),t._v(" computed property.")]),t._v(" "),e("div",{staticClass:"language-swift line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" myView"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" body"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("some")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("SwiftUI reads the value of the "),e("code",[t._v("body")]),t._v(" property any time it needs to update the view, which can happen repeatedly during the life of the view, typically in response to user input or system events. The value that the view returns is an element that SwiftUI draws onscreen.")]),t._v(" "),e("p",[t._v("The View protocol‚Äôs secondary requirement is that conforming types must indicate an "),e("a",{attrs:{href:"https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID189",target:"_blank",rel:"noopener noreferrer"}},[t._v("associated type"),e("OutboundLink")],1),t._v(" for the body property. However, you don‚Äôt make an explicit declaration. Instead, you declare the body property as an "),e("a",{attrs:{href:"https://docs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("opaque type"),e("OutboundLink")],1),t._v(" using the some View syntax, to indicate only that the body‚Äôs type conforms to View. The exact type depends on the body‚Äôs content, which varies as you edit the body during development. Swift infers the exact type automatically.")]),t._v(" "),e("h2",{attrs:{id:"add-ui-elements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-ui-elements"}},[t._v("#")]),t._v(" Add UI Elements")]),t._v(" "),e("p",[t._v("Describe your view‚Äôs appearance by adding content to the view‚Äôs body property. You can compose the body from built-in views that SwiftUI provides, as well as custom views that you‚Äôve defined elsewhere. For example, you can create a body that draws the string ‚ÄúHello, World!‚Äù using a built-in Text view:")]),t._v(" "),e("div",{staticClass:"language-swift line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyView")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" body"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("some")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Text")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string-literal"}},[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, World!"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("h3",{attrs:{id:"configure-ui-elements-with-modifiers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configure-ui-elements-with-modifiers"}},[t._v("#")]),t._v(" Configure UI Elements with Modifiers")]),t._v(" "),e("p",[t._v("To configure the views in your view‚Äôs body, you apply view modifiers. A modifier is nothing more than a method called on a particular view. The method returns a new, altered view that effectively takes the place of the original in the view hierarchy.")]),t._v(" "),e("p",[t._v("SwiftUI extends the View protocol with a large set of methods for this purpose. All View protocol conformers ‚Äî both built-in and custom views ‚Äî have access to these methods that alter the behavior of a view in some way. For example, you can change the font of a text view by applying the font(_üòÉ modifier:")]),t._v(" "),e("div",{staticClass:"language-swift line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyView")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" body"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("some")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VStack")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Text")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string-literal"}},[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, World!"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("font")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Text")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string-literal"}},[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Glad to meet you."')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])]),e("h2",{attrs:{id:"add-a-new-view-to-the-view-hierarchy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-a-new-view-to-the-view-hierarchy"}},[t._v("#")]),t._v(" Add a New View to the View Hierarchy")]),t._v(" "),e("p",[t._v("After you define a view, you can incorporate it in other views, just like you do with built-in views. You add your view by declaring it at the point in the hierarchy at which you want it to appear. For example, you could put MyView in your app‚Äôs ContentView, which Xcode creates automatically as the root view of a new app:")]),t._v(" "),e("div",{staticClass:"language-swift line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ContentView")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" body"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("some")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyView")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("helloFont"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("h2",{attrs:{id:"see-also"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#see-also"}},[t._v("#")]),t._v(" See Also")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.apple.com/documentation/swiftui/declaring-a-custom-view",target:"_blank",rel:"noopener noreferrer"}},[t._v("View Fundamentals - Apple Developer Documentation"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.apple.com/documentation/swiftui/view",target:"_blank",rel:"noopener noreferrer"}},[t._v("View Protocol - Apple Developer Documentation"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://app.pluralsight.com/course-player?clipId=b548ca85-bcb1-45cd-a401-ef6f4eab45d6",target:"_blank",rel:"noopener noreferrer"}},[t._v("Understanding Views - OS 14 Getting Started | Pluralsight"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=n.exports}}]);